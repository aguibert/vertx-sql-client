/*
 * Copyright (C) 2019,2020 IBM Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.vertx.db2client.impl.drda;

import java.sql.ResultSet;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;

public class Section {
	
	private static final Logger LOG = Logger.getLogger(Section.class.getName());
    
	final DB2Package pkg;
    final int number;
//    private final int resultSetHoldability_;
//    private final boolean isGenerated;
    
    private final AtomicBoolean inUse = new AtomicBoolean(true);

//    // Stores the package name and consistency token
//    private byte[] PKGNAMCBytes;
    
    @Override
    public String toString() {
        return super.toString() + "{packageName=" + pkg.name + ", sectionNumber=" + number + ", cursorName=" + pkg.cursorNamePrefix + "}"; 
    }
    
    Section(DB2Package pkg, int sectionNumber) {
    	this(pkg, sectionNumber, ResultSet.HOLD_CURSORS_OVER_COMMIT);
    }

    Section(DB2Package pkg, int sectionNumber, int resultSetHoldability) {
        this(pkg, sectionNumber, resultSetHoldability, false);
    }

    Section(DB2Package pkg, int sectionNumber, int resultSetHoldability, boolean isGenerated) {
        this.pkg = pkg;
        this.number = sectionNumber;
//        this.resultSetHoldability_ = resultSetHoldability;
//        this.isGenerated = isGenerated;

        // Store the packagename and consistency token bytes depending on the holdability
        // PKGNAMCBytes will point to the appropriate byte array in SectionManager
        // that stores the PKGNAMCBytes for reuse
        // There are 2 byte arrays in SectionManager
        // 1. holdPKGNAMCBytes which stores the PKGNAMCBytes when holdability is set
        // 2. noHoldPKGNAMCBytes which stores the PKGNAMCBytes when holdability is non hold
        // Note for generated sections, PKGNAMCBytes is generated by the server.
//        if (!isGenerated) {
//            // @AGG assume we are always using HOLD_CURSORS_OVER_COMMIT
////            if (resultSetHoldability_ == ResultSet.HOLD_CURSORS_OVER_COMMIT) {
//                PKGNAMCBytes = SectionManager.INSTANCE.holdPKGNAMCBytes;
////            } else if (resultSetHoldability_ == ResultSet.CLOSE_CURSORS_AT_COMMIT) {
////                PKGNAMCBytes = agent_.sectionManager_.noHoldPKGNAMCBytes;
////            }
//        }
    }

//    /**
//     * Store the Packagename and consistency token information for
//     * reuse.
//     * <ul>
//     *    <li>Case 1: if it is generated section, just store the byte
//     *        array in PKGNAMCBytes.</li>
//     *    <li>Case 2: for not a generated section, information is
//     *        stored in the correct byte array depending on the holdability
//     *        in SectionManager.</li>
//     * </ul>
//     * @param b the Packagename and consistency token information to store;
//     *      should never be null.
//     */
//    public void setPKGNAMCBytes(byte[] b) {
//        if (isGenerated) {
//            PKGNAMCBytes = b.clone();
//        } else {
//            SectionManager.INSTANCE.setPKGNAMCBytes(b, resultSetHoldability_);
//        }
//    }
//
//    /**
//     * retrieve the package name and consistency token information
//     */
//    public byte[] getPKGNAMCBytes() {
//        return PKGNAMCBytes != null ?
//               PKGNAMCBytes.clone() :
//               null;
//    }

//    // member for positioned update sections only
//    String serverCursorNameForPositionedUpdate_ = null;
//
//    public String getServerCursorNameForPositionedUpdate() {
//        return serverCursorNameForPositionedUpdate_;
//    }

    // ------------------------ transient members --------------------------------

//    // As given by jdbc setCursorName(), this can change
//    transient private String clientCursorName_;
//
//    public String getClientCursorName() {
//        return clientCursorName_;
//    }
//
//    public void setClientCursorName(String clientCursorName) { //
//        this.clientCursorName_ = clientCursorName;
//    }
    
    /**
     * Marks a section for use. An initially created section is already in use.
     * @throws IllegalStateException if this method is called on a section that
     *  is already in use
     * @see #release()
     */
    void use() {
    	if (LOG.isLoggable(Level.FINE))
    		LOG.fine("Marking section for use: " + this);
    	
    	if (inUse.getAndSet(true)) {
    		throw new IllegalStateException("Attempted to use a section multiple times: " + this);
    	}
    }

    /**
     * Release a section so it may be used again by a different query.
     * @throws IllegalStateException if this method is called on a free section
     * @see #use()
     */
    public void release() {
    	if (LOG.isLoggable(Level.FINE))
    		LOG.fine("Releasing section: " + this);
    	
    	if (inUse.getAndSet(false)) {
    		pkg.freeSections.add(this);
    	} else {
    		throw new IllegalStateException("Attempted to release section multiple times: " + this);
    	}
    }

//    public boolean isReservedPositionedUpdate() {
//        return false;
//    }
//
//    public int getStaticStatementType() {
//        return 0;
//    }

//    public Section getPositionedUpdateSection() throws SqlException {
//        return agent_.sectionManager_.getPositionedUpdateSection(this);
//    }

//    public void setCursorName(String name) {
//        serverCursorName = name;
//    }
    
}