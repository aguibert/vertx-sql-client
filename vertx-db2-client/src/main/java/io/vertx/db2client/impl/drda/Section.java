package io.vertx.db2client.impl.drda;
import java.sql.ResultSet;

public class Section {
    
    // @AGG originally these were on SectionManager
    // store package consistency token information and initialized in
    // setPKGNAMCBytes
    // holdPKGNAMCBytes stores PKGNAMCBytes when holdability is hold
    // noHoldPKGNAMCBytes stores PKGNAMCBytes when holdability is no hold
    byte[] holdPKGNAMCBytes = null;
    byte[] noHoldPKGNAMCBytes = null;


    private final static String packageNameWithHold__ = "SYSLH000";
    private final static String packageNameWithNoHold__ = "SYSLN000";

    private final static String cursorNamePrefixWithHold__ = "SQL_CURLH000C";
    private final static String cursorNamePrefixWithNoHold__ = "SQL_CURLN000C";

    private int sectionNumber;
    private String packageName;
    private String serverCursorName; // As given by dnc package set
    private int resultSetHoldability_;

    // Stores the package name and consistency token
    private byte[] PKGNAMCBytes;
    private boolean isGenerated; // flag to identify server generated sections

    Section(String name,
            int sectionNumber,
            String cursorName,
            int resultSetHoldability) {
        // default for all sections except for generated section , isGenerated is set to false
        init(name, sectionNumber, cursorName, resultSetHoldability, false);
    }

    public Section(String name, int sectionNumber, String cursorName, int resultSetHoldability, boolean isGenerated) {
        init(name, sectionNumber, cursorName, resultSetHoldability, isGenerated);
    }

    private void init(String name, int sectionNumber, String cursorName, int resultSetHoldability, boolean isGenerated) {
        this.packageName = name;
        this.sectionNumber = sectionNumber;
        this.serverCursorName = cursorName;
        resultSetHoldability_ = resultSetHoldability;
        this.isGenerated = isGenerated;

        // Store the packagename and consistency token bytes depending on the holdability
        // PKGNAMCBytes will point to the appropriate byte array in SectionManager
        // that stores the PKGNAMCBytes for reuse
        // There are 2 byte arrays in SectionManager
        // 1. holdPKGNAMCBytes which stores the PKGNAMCBytes when holdability is set
        // 2. noHoldPKGNAMCBytes which stores the PKGNAMCBytes when holdability is non hold
        // Note for generated sections, PKGNAMCBytes is generated by the server.
        if (!isGenerated) {
            // @AGG assume we are always using HOLD_CURSORS_OVER_COMMIT
//            if (resultSetHoldability_ == ResultSet.HOLD_CURSORS_OVER_COMMIT) {
                PKGNAMCBytes = holdPKGNAMCBytes;
//            } else if (resultSetHoldability_ == ResultSet.CLOSE_CURSORS_AT_COMMIT) {
//                PKGNAMCBytes = agent_.sectionManager_.noHoldPKGNAMCBytes;
//            }
        }
    }

    /**
     * Store the Packagename and consistency token information for
     * reuse.
     * <ul>
     *    <li>Case 1: if it is generated section, just store the byte
     *        array in PKGNAMCBytes.</li>
     *    <li>Case 2: for not a generated section, information is
     *        stored in the correct byte array depending on the holdability
     *        in SectionManager.</li>
     * </ul>
     * @param b the Packagename and consistency token information to store;
     *      should never be null.
     */
    public void setPKGNAMCBytes(byte[] b) {
        if (isGenerated) {
            PKGNAMCBytes = b.clone();
        } else {
            setPKGNAMCBytes(b, resultSetHoldability_);
        }
    }

    /**
     * retrieve the package name and consistency token information
     */
    public byte[] getPKGNAMCBytes() {
        return PKGNAMCBytes != null ?
               PKGNAMCBytes.clone() :
               null;
    }

    public String getPackageName() {
        return this.packageName;
    }


    // Add a finalizer to free() the section, useful for Statement.executes that result in exceptions

    public int getSectionNumber() {
        return this.sectionNumber;
    }

    public String getPackage() {
        return this.packageName;
    }

    public String getServerCursorName() {
        return this.serverCursorName;
    }

    // member for positioned update sections only
    String serverCursorNameForPositionedUpdate_ = null;

    public String getServerCursorNameForPositionedUpdate() {
        return serverCursorNameForPositionedUpdate_;
    }

    // ------------------------ transient members --------------------------------

    // As given by jdbc setCursorName(), this can change
    transient private String clientCursorName_;

    public String getClientCursorName() {
        return clientCursorName_;
    }

    public void setClientCursorName(String clientCursorName) { //
        //System.out.println("clientCursorName is set"+ clientCursorName);
        this.clientCursorName_ = clientCursorName;
    }

//    void free() {
//        if (resultSetHoldability_ != -1) {
//            this.agent_.sectionManager_.freeSection(this, resultSetHoldability_);
//        }
//    }

    public boolean isReservedPositionedUpdate() {
        return false;
    }

    public int getStaticStatementType() {
        return 0;
    }

//    public Section getPositionedUpdateSection() throws SqlException {
//        return agent_.sectionManager_.getPositionedUpdateSection(this);
//    }

    public void setCursorName(String name) {
        serverCursorName = name;
    }
    
    /**
     * @AGG originally this was on SectionManager
     * Store the Packagename and consistency token information This is called from Section.setPKGNAMCBytes
     *
     * @param b                    bytearray that has the PKGNAMC information to be stored
     * @param resultSetHoldability depending on the holdability store it in the correct byte array packagename and
     *                             consistency token information for when holdability is set to HOLD_CURSORS_OVER_COMMIT
     *                             is stored in holdPKGNAMCBytes and in noHoldPKGNAMCBytes when holdability is set to
     *                             CLOSE_CURSORS_AT_COMMIT
     */
    void setPKGNAMCBytes(byte[] b, int resultSetHoldability) {
        if (resultSetHoldability == ResultSet.HOLD_CURSORS_OVER_COMMIT) {
            holdPKGNAMCBytes = b;
        } else if (resultSetHoldability == ResultSet.CLOSE_CURSORS_AT_COMMIT) {
            noHoldPKGNAMCBytes = b;
        }
    }

}